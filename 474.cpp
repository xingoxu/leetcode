#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

class Solution
{
  unordered_map<string, int> cache;
  // naive solution requiring O(mn size) space
  int findMaxForm(vector<string> &strs, int index, int m, int n)
  {
    if (index >= strs.size())
      return 0;
    string key = to_string(index) + "-" + to_string(m) + "-" + to_string(n);
    auto it = cache.find(key);
    if (it != cache.end())
      return it->second;

    int child = findMaxForm(strs, index + 1, m, n);

    for (auto &ch : strs[index])
    {
      if (ch == '1')
        --n;
      else
        --m;
      if (m < 0 || n < 0)
      {
        cache[key] = child;
        return child;
      }
    }
    int child2 = findMaxForm(strs, index + 1, m, n);
    return cache[key] = max(child, child2 + 1);
  }

public:
  int findMaxForm(vector<string> &strs, int m, int n)
  {
    // return findMaxForm(strs, 0, m, n);
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

    for (auto &str : strs)
    {
      int num1 = 0, num0 = 0;
      for (auto &ch : str)
      {
        if (ch == '1')
          ++num1;
        else
          ++num0;
      }

      for (int i = m; i >= num0; --i)
        for (int j = n; j >= num1; --j)
          dp[i][j] = max(dp[i][j], dp[i - num0][j - num1] + 1);
      
    }
    return dp[m][n];
  }
};

int main()
{
  vector<string> strs{};
  cout << Solution().findMaxForm(strs, 50, 50) << endl;
  return 0;
}